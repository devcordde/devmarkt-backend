type Query {
    templates: [Template!] @Auth(role: "user")

    template(
        name: TemplateName!
    ): TemplateResponse @Auth(role: "user")

    roles: [String!] @Auth(role: "admin")

    user(
        id: UserIdInput!
    ): UserResponse @Auth(role: "admin")

    application(
        id: ApplicationId!
    ): ApplicationResponse! @Auth(role: "user") # TODO: add enhanced authorization based on application owner

    applications(
        from: DateTime!
        to: DateTime!
        userId: UserIdInput
    ): [Application!]! @Auth(role: "user") # TODO: add enhanced authorization based on application owner
}

type Mutation {
    createTemplate(
        name: TemplateName!
        questions: [QuestionInput!]!
    ): TemplateResponse @Auth(role: "admin")

    deleteTemplate(
        name: TemplateName!
    ): Boolean @Auth(role: "admin")

    updateTemplate(
        name: TemplateName!
        updated: TemplateInput!
    ): TemplateResponse! @Auth(role: "admin")

    createUser(
        userId: UserIdInput!
        role: Role!
    ): UserResponse @Auth(role: "admin")

    deleteUser(
        userId: UserIdInput!
    ): Boolean! @Auth(role: "admin")

    updateUserRole(
        userId: UserIdInput!
        role: Role!
    ): UserResponse! @Auth(role: "admin")

    createApplication(
        templateName: TemplateName!
        answers: [AnswerInput!]!
    ): ApplicationResponse! @Auth(role: "user")

    deleteApplication(
        id: ApplicationId!
    ): Boolean! @Auth(role: "user") # TODO: add enhanced authorization based on application owner

    updateApplication(
        id: ApplicationId!
        updatedAnswers: [AnswerInput!]!
    ): ApplicationResponse! @Auth(role: "user") # TODO: add enhanced authorization based on application owner

    processApplication(
        id: ApplicationId!
        status: ApplicationStatus!
    ): ApplicationResponse! @Auth(role: "admin")
}

# common
type Failure {
    message: String!
    errorCode: String!
}
